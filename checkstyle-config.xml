<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="error"/>

<!--    <property name="fileExtensions" value="java, properties, xml"/>-->

<!--    <module name="FileTabCharacter">-->
<!--        <property name="eachLine" value="true"/>-->
<!--    </module>-->

<!--    <module name="TreeWalker">-->
<!--        &lt;!&ndash;-->
<!--        Description:    Checks that the outer type name and the file name match.-->
<!--        Example:        The class Foo must be in a file named Foo.java.-->
<!--        Error messages: The name of the outer type and the file do not match.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_misc.html#OuterTypeFilename-->
<!--        &ndash;&gt;-->
<!--        <module name="OuterTypeFilename"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for illegal token text.-->
<!--        Example:        To configure the check to forbid String literals containing "a href":-->
<!--                        <module name="IllegalTokenText">-->
<!--                            <property name="tokens" value="STRING_LITERAL"/>-->
<!--                            <property name="format" value="a href"/>-->
<!--                        </module>-->
<!--        Error messages: Token text matches the illegal pattern ''{0}''.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#IllegalTokenText-->
<!--        &ndash;&gt;-->
<!--        <module name="IllegalTokenText">-->
<!--            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>-->
<!--            <property name="format"-->
<!--                      value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>-->
<!--            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Restrict using Unicode escapes (e.g. \u221e).-->
<!--        Example:        Check Doc examples.-->
<!--        Error messages: Unicode escape(s) usage should be avoided.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_misc.html#AvoidEscapedUnicodeCharacters-->
<!--        &ndash;&gt;-->
<!--        <module name="AvoidEscapedUnicodeCharacters">-->
<!--            <property name="allowEscapesForControlCharacters" value="true"/>-->
<!--            <property name="allowByTailComment" value="true"/>-->
<!--            <property name="allowNonPrintableEscapes" value="true"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that each top-level class, interface or enum resides in a source file of its own.-->
<!--        Example:        Check Doc examples.-->
<!--        Error messages: Top-level class {0} has to reside in its own source file.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_design.html#OneTopLevelClass-->
<!--        &ndash;&gt;-->
<!--        <module name="OneTopLevelClass"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that chosen statements are not line-wrapped. By default this Check restricts-->
<!--                        wrapping import and package statements, but it's possible to check any statement.-->
<!--        Example:        Bad:  import package com.puppycrawl.-->
<!--                                        tools.checkstyle.checks;-->
<!--                        Good: import package com.puppycrawl.tools.checkstyle.checks;-->
<!--        Error messages: Statement should not be line-wrapped.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#NoLineWrap-->
<!--        &ndash;&gt;-->
<!--        <module name="NoLineWrap"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for empty blocks(while, try, finally, if, else etc).-->
<!--        Example:        Empty if(true){ } will be failed.-->
<!--        Error messages: Empty {if} block.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_blocks.html#EmptyBlock-->
<!--        &ndash;&gt;-->
<!--        <module name="EmptyBlock">-->
<!--            <property name="option" value="TEXT"/>-->
<!--            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for braces around code blocks.-->
<!--        Example:        Bad:  if (true) doSomething();-->
<!--                        Good: if (true) {-->
<!--                            doSomething();-->
<!--                        }-->
<!--        Error messages: 'if' construct must use '{}'s.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_blocks.html#NeedBraces-->
<!--        &ndash;&gt;-->
<!--        <module name="NeedBraces"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for the placement of left curly braces ('{') for code blocks.-->
<!--        Example:        Bad:  if (true)-->
<!--                              {-->
<!--                                doSomething();-->
<!--                              }-->
<!--                        Good: if (true) {-->
<!--                                doSomething();-->
<!--                              }-->
<!--        Error messages: '{' at column 5 should be on the previous line.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_blocks.html#LeftCurly-->
<!--        &ndash;&gt;-->
<!--        <module name="LeftCurly"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the placement of right curly braces ('}') for if-else, try-catch-finally blocks,-->
<!--                        while-loops, for-loops, method definitions, class definitions, constructor definitions,-->
<!--                        instance and static initialization blocks.-->
<!--        Example:        http://checkstyle.sourceforge.net/property_types.html#rcurly-->
<!--        Error messages: More then one, check Doc for more details.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_blocks.html#RightCurly-->
<!--        &ndash;&gt;-->
<!--        <module name="RightCurly"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that a token is surrounded by whitespace.-->
<!--        Example:        public MyClass() {}-->
<!--        Error messages: More then one, check Doc for more details.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#WhitespaceAround-->
<!--        &ndash;&gt;-->
<!--        <module name="WhitespaceAround">-->
<!--            <property name="allowEmptyConstructors" value="true"/>-->
<!--            <property name="allowEmptyMethods" value="false"/>-->
<!--            <property name="allowEmptyTypes" value="true"/>-->
<!--            <property name="allowEmptyLoops" value="true"/>-->
<!--            <message key="ws.notFollowed"-->
<!--                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>-->
<!--            <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that there is only one statement per line.-->
<!--        Example:        int var1; int var2; // fail-->
<!--        Error messages: Only one statement per line allowed.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#OneStatementPerLine-->
<!--        &ndash;&gt;-->
<!--        <module name="OneStatementPerLine"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that each variable declaration is in its own statement and on its own line.-->
<!--        Example:        int var1, var2; // fail-->
<!--        Error messages: Each variable declaration must be in its own statement.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#MultipleVariableDeclarations-->
<!--        &ndash;&gt;-->
<!--        <module name="MultipleVariableDeclarations"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the style of array type definitions. Default - Java style.-->
<!--        Example:        Java style: public static void main(String[] args)-->
<!--                        C style:    public static void main(String args[])-->
<!--        Error messages: Array brackets at illegal position.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_misc.html#ArrayTypeStyle-->
<!--        &ndash;&gt;-->
<!--        <module name="ArrayTypeStyle"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the style of array type definitions. Default - Java style.-->
<!--        Example:        Java style: public static void main(String[] args)-->
<!--                        C style:    public static void main(String args[])-->
<!--        Error messages: Array brackets at illegal position.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_misc.html#ArrayTypeStyle-->
<!--        &ndash;&gt;-->
<!--        <module name="MissingSwitchDefault"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for fall-through in switch statements. Finds locations where a case contains-->
<!--                        Java code but lacks a break, return, throw or continue statement.-->
<!--        Example:        switch (i){-->
<!--                            case 0:-->
<!--                                i++; // fall through-->
<!--                            case 1:-->
<!--                                i++; // falls through-->
<!--                            case 2:-->
<!--                        }-->
<!--        Error messages: from previous/last branch of the switch statement.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#FallThrough-->
<!--        &ndash;&gt;-->
<!--        <module name="FallThrough"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that long constants are defined with an upper ell. That is ' L' and not 'l'.-->
<!--        Example:        long num = 10l; // fail, should be 10L-->
<!--        Error messages: Should use uppercase ''L''.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_misc.html#UpperEll-->
<!--        &ndash;&gt;-->
<!--        <module name="UpperEll"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that the order of modifiers conforms to the suggestions in the Java Language-->
<!--                        specification, sections 8.1.1, 8.3.1 and 8.4.3. The correct order is:-->
<!--                        1.  public-->
<!--                        2.  protected-->
<!--                        3.  private-->
<!--                        4.  abstract-->
<!--                        5.  static-->
<!--                        6.  final-->
<!--                        7.  transient-->
<!--                        8.  volatile-->
<!--                        9.  synchronized-->
<!--                        10. native-->
<!--                        11. strictfp-->
<!--        Example:        final static long num; // fail, should be static final long num;-->
<!--        Error messages: Annotation modifier does not precede non-annotation modifiers.-->
<!--                        Modifier out of order with the JLS suggestions.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_modifier.html#ModifierOrder-->
<!--        &ndash;&gt;-->
<!--        <module name="ModifierOrder"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for empty line separators after header, package, all import declarations, fields,-->
<!--                        constructors, methods, nested classes, static initializers and instance initializers.-->
<!--        Example:        Check Doc.-->
<!--        Error messages: More then one.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#EmptyLineSeparator-->
<!--        &ndash;&gt;-->
<!--        <module name="EmptyLineSeparator">-->
<!--            <property name="allowNoEmptyLineBetweenFields" value="true"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks line wrapping with separators.-->
<!--        Example:        s-->
<!--                            .isEmpty();-->
<!--                        foo(i-->
<!--                            ,s);-->
<!--        Error messages: Should be on a new line.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#SeparatorWrap-->
<!--        &ndash;&gt;-->
<!--        <module name="SeparatorWrap">-->
<!--            <property name="tokens" value="DOT"/>-->
<!--            <property name="option" value="nl"/>-->
<!--        </module>-->
<!--        <module name="SeparatorWrap">-->
<!--            <property name="tokens" value="COMMA"/>-->
<!--            <property name="option" value="EOL"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Validates identifiers for packages by regex.-->
<!--        Example:        package Mypackege // fail-->
<!--        Error messages: '{0}' must match pattern '{1}'.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#PackageName-->
<!--        &ndash;&gt;-->
<!--        <module name="PackageName">-->
<!--            <property name="format" value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>-->
<!--            <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''."/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Validates identifiers for packages by regex.-->
<!--        Example:        package Mypackege // fail-->
<!--        Error messages: '{0}' must match pattern '{1}'.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#PackageName-->
<!--        &ndash;&gt;-->
<!--        <module name="TypeName">-->
<!--            <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''."/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Validates identifiers for class type parameters by regex.-->
<!--        Example:        class dog { } // fail-->
<!--        Error messages: Class type name '{0}' must match pattern '{1}'.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#ClassTypeParameterName-->
<!--        &ndash;&gt;-->
<!--        <module name="ClassTypeParameterName">-->
<!--            <property name="format" value="^[A-Z]$"/>-->
<!--            <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''."/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Validates identifiers for method type parameters by regex.-->
<!--        Example:        private string name; // fail-->
<!--        Error messages: Method type name '{0}' must match pattern '{1}'.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#MethodTypeParameterName-->
<!--        &ndash;&gt;-->
<!--        <module name="MethodTypeParameterName">-->
<!--            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>-->
<!--            <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''."/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Verifies there are no finalize() methods defined in a class.-->
<!--        Example:        Obviously.-->
<!--        Error messages: Avoid using finalizer method.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#NoFinalizer-->
<!--        &ndash;&gt;-->
<!--        <module name="NoFinalizer"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that the whitespace around the Generic tokens (angle brackets) "<" and ">" are correct-->
<!--                        to the typical convention. The convention is not configurable.-->
<!--        Example:        Check Doc.-->
<!--        Error messages: More then one.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace-->
<!--        &ndash;&gt;-->
<!--        <module name="GenericWhitespace">-->
<!--            <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace."/>-->
<!--            <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace."/>-->
<!--            <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace."/>-->
<!--            <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    The Check validate abbreviations(consecutive capital letters) length in identifier name,-->
<!--                        it also allows to enforce camel case naming.-->
<!--        Example:        final int MAx; // fail-->
<!--        Error messages: Abbreviation in name '{0}' must contain no more than '{1}' capital letters.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#AbbreviationAsWordInName-->
<!--        &ndash;&gt;-->
<!--        <module name="AbbreviationAsWordInName">-->
<!--            <property name="ignoreFinal" value="false"/>-->
<!--            <property name="allowedAbbreviationLength" value="30"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that overload methods are grouped together.-->
<!--        Example:        Incorrect group:-->
<!--                        public void foo(int i) {}-->
<!--                        public void foo(String s) {}-->
<!--                        public void notFoo() {} // Have to be after foo(int i, String s)-->
<!--                        public void foo(int i, String s) {}-->
<!--        Error messages: Overload methods should not be split. Previous overloaded method located at line.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#OverloadMethodsDeclarationOrder-->
<!--        &ndash;&gt;-->
<!--        <module name="OverloadMethodsDeclarationOrder"/>-->

<!--        &lt;!&ndash;                              TO CONFIG                                  &ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--        Description:    Checks the distance between declaration of variable and its first usage.-->
<!--        Example:        int count;-->
<!--                        a = a + b;-->
<!--                        b = a + a;-->
<!--                        count = b; // DECLARATION OF VARIABLE 'count'-->
<!--                                   // SHOULD BE HERE (distance = 3)-->
<!--        Error messages: More then one. Check Doc.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#VariableDeclarationUsageDistance-->
<!--        &ndash;&gt;-->
<!--        <module name="VariableDeclarationUsageDistance"/>-->
<!--        &lt;!&ndash;                                                                         &ndash;&gt;-->


<!--        &lt;!&ndash;                                     TO CONFIG                                            &ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--        Description:    Checks that the groups of import declarations appear in the order specified by the user.-->
<!--                        If there is an import but its group is not specified in the configuration such an import-->
<!--                        should be placed at the end of the import list.-->
<!--        Example:        Check Doc for example.-->
<!--        Error messages: More then one. Check Doc.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_imports.html#CustomImportOrder-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="CustomImportOrder">-->
<!--            <property name="specialImportsRegExp" value="com.google"/>-->
<!--            &lt;!&ndash;<property name="sortImportsInGroupAlphabetically" value="true"/>&ndash;&gt;-->
<!--            <property name="customImportOrderRules"-->
<!--                      value="STATIC###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE"/>-->
<!--        </module>&ndash;&gt;-->


<!--        &lt;!&ndash;-->
<!--        Description:    Checks the padding between the identifier of a method definition, constructor definition,-->
<!--                        method call, or constructor invocation; and the left parenthesis of the parameter list.-->
<!--        Example:        - -->
<!--        Error messages: More then one. Check Doc.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#MethodParamPad-->
<!--        &ndash;&gt;-->
<!--        <module name="MethodParamPad"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the policy on how to wrap lines on operators.-->
<!--        Example:        - -->
<!--        Error messages: Should be on a new/previous line.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#OperatorWrap-->
<!--        &ndash;&gt;-->
<!--        <module name="OperatorWrap">-->
<!--            <property name="option" value="NL"/>-->
<!--            <property name="tokens"-->
<!--                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Check location of annotation on language elements. By default, Check enforce to locate-->
<!--                        annotations immediately after documentation block and before target element, annotation-->
<!--                        should be located on separate line from target element.-->
<!--        Example:        Check Doc.-->
<!--        Error messages: Annotation should be alone on line.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_annotation.html#AnnotationLocation-->
<!--        &ndash;&gt;-->
<!--        <module name="AnnotationLocation">-->
<!--            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>-->
<!--        </module>-->
<!--        <module name="AnnotationLocation">-->
<!--            <property name="tokens" value="VARIABLE_DEF"/>-->
<!--            <property name="allowSamelineMultipleAnnotations" value="true"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that the at-clause tag is followed by description.-->
<!--        Example:        - -->
<!--        Error messages: More then one. Check Doc.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_javadoc.html#NonEmptyAtclauseDescription-->
<!--        &ndash;&gt;-->
<!--        <module name="NonEmptyAtclauseDescription"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the indentation of the continuation lines in at-clauses.-->
<!--        Example:        How many spaces to use for new indentation level. Default - 4.-->
<!--        Error messages: More then one. Check Doc.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_javadoc.html#JavadocTagContinuationIndentation-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="JavadocTagContinuationIndentation"/>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that Javadoc summary sentence does not contain phrases that are not recommended to use.-->
<!--        Example:        Use regex to check for incorrect Doc words.-->
<!--        Error messages: More then one. Check Doc.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_javadoc.html#SummaryJavadoc-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="SummaryJavadocCheck">-->
<!--            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>-->
<!--        </module>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that:-->
<!--                        - There is one blank line between each of two paragraphs and one blank line before the-->
<!--                          at-clauses block if it is present.-->
<!--                        - Each paragraph but the first has <p> immediately before the first word, with no space after.-->
<!--        Example:        Check Doc.-->
<!--        Error messages: More then one. Check Doc.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_javadoc.html#JavadocParagraph-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="JavadocParagraph"/>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the order of at-clauses.-->
<!--        Example:        - -->
<!--        Error messages: More then one. Check Doc.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_javadoc.html#AtclauseOrder-->
<!--        &ndash;&gt;-->
<!--        <module name="AtclauseOrder">-->
<!--            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>-->
<!--            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the Javadoc of a method or constructor. Check Doc for more details.-->
<!--        Example:        Check Doc.-->
<!--        Error messages: More then one. Check Doc.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="JavadocMethod">-->
<!--            &lt;!&ndash;<property name="scope" value="public"/>&ndash;&gt;-->
<!--            <property name="allowMissingParamTags" value="true"/>-->
<!--            <property name="allowMissingThrowsTags" value="true"/>-->
<!--            <property name="allowMissingReturnTag" value="true"/>-->
<!--            <property name="minLineCount" value="4"/>-->
<!--            <property name="allowedAnnotations" value="Override, Test"/>-->
<!--            <property name="allowThrowsTagsForSubclasses" value="true"/>-->
<!--            &lt;!&ndash; disable getters/setters check &ndash;&gt;-->
<!--            <property name="allowMissingPropertyJavadoc" value="true"/>-->
<!--            &lt;!&ndash; disable constructors check &ndash;&gt;-->
<!--            <property name="ignoreMethodNamesRegex" value="^[A-Z].*$"/>-->
<!--        </module>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that a JavaDoc block can fit in a single line and doesn't contain at-clauses.-->
<!--                        Javadoc comment that contains at least one at-clause should be formatted in a few lines.-->
<!--        Example:        Check Doc.-->
<!--        Error messages: More then one. Check Doc.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_javadoc.html#SingleLineJavadoc-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="SingleLineJavadoc">-->
<!--            <property name="ignoreInlineTags" value="false"/>-->
<!--        </module>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that a JavaDoc block can fit in a single line and doesn't contain at-clauses.-->
<!--                        Javadoc comment that contains at least one at-clause should be formatted in a few lines.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_blocks.html#EmptyCatchBlock-->
<!--        &ndash;&gt;-->
<!--        <module name="EmptyCatchBlock">-->
<!--            <property name="exceptionVariableName" value="expected"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Controls the indentation between comments and surrounding code.-->
<!--                        Comments are indented at the same level as the surrounding code.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_blocks.html#EmptyCatchBlock-->
<!--        &ndash;&gt;-->
<!--        <module name="CommentsIndentation"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks Javadoc comments for class and interface definitions.-->
<!--                        By default, does not check for author or version tags.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_javadoc.html#JavadocType-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="JavadocType"/>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that variables have Javadoc comments. Ignores serialVersionUID fields.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_javadoc.html#JavadocVariable-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="JavadocVariable">-->
<!--            <property name="excludeScope" value="private"/>-->
<!--        </module>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Validates Javadoc comments to help ensure they are well formed. Check Doc for details.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_javadoc.html#JavadocStyle-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="JavadocStyle"/>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Validates identifiers for constants (static, final fields).-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#ConstantName-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;                              TO CONFIG                                 &ndash;&gt;-->
<!--        <module name="ConstantName">-->
<!--            <property name="format" value="^log(ger)?|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>-->
<!--        </module>-->
<!--        &lt;!&ndash;                                                                        &ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--        Description:    Validates identifiers for local, final variables, including catch parameters.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#LocalFinalVariableName-->
<!--        &ndash;&gt;-->
<!--        <module name="LocalFinalVariableName">-->
<!--            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>-->
<!--            <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that local, non-final variable names conform to a format specified by the format property.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#LocalVariableName-->
<!--        &ndash;&gt;-->
<!--        <module name="LocalVariableName">-->
<!--            <property name="tokens" value="VARIABLE_DEF"/>-->
<!--            <property name="format" value="^[a-z][a-zA-Z]*$"/>-->
<!--            <property name="allowOneCharVarInForLoop" value="true"/>-->
<!--            <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."/>-->
<!--        </module>-->


<!--        &lt;!&ndash;                                     TO CONFIG                                            &ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--        Description:    Validates identifiers for non-static fields.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#MemberName-->
<!--        &ndash;&gt;-->
<!--&lt;!&ndash;        <module name="MemberName">&ndash;&gt;-->
<!--&lt;!&ndash;            <property name="format" value="^[a-z][a-zA-Z]*$|^[A-Z]$"/>&ndash;&gt;-->
<!--&lt;!&ndash;            <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''."/>&ndash;&gt;-->
<!--&lt;!&ndash;        </module>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Validates identifiers for methods.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#MethodName-->
<!--        &ndash;&gt;-->
<!--        <module name="MethodName">-->
<!--            <property name="format" value="^[a-z][a-zA-Z_]*$"/>-->
<!--            <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''."/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that method and catch parameter names conform to a format specified by the format property.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#ParameterName-->
<!--        &ndash;&gt;-->
<!--        <module name="ParameterName">-->
<!--            <property name="format" value="^[a-z][a-zA-Z]*$"/>-->
<!--            <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Validates identifiers for static, non-final fields.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_naming.html#StaticVariableName-->
<!--        &ndash;&gt;-->
<!--        <module name="StaticVariableName"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for imports from a set of illegal packages. By default, the check rejects-->
<!--                        all sun.* packages since programs that contain direct calls to the sun.* packages-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_imports.html#IllegalImport-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="IllegalImport"/>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for redundant import statements. An import statement is considered redundant if:-->
<!--                        - It is a duplicate of another import. This is, when a class is imported more than once.-->
<!--                        - The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.-->
<!--                        - The class non-statically imported is from the same package as the current package.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_imports.html#RedundantImport-->
<!--        &ndash;&gt;-->
<!--        <module name="RedundantImport"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for unused import statements. Checkstyle uses a simple but very reliable algorithm-->
<!--                        to report on unused import statements. Check Doc for details.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_imports.html#UnusedImports-->
<!--        &ndash;&gt;-->
<!--        <module name="UnusedImports"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the number of parameters of a method or constructor.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_sizes.html#ParameterNumber-->
<!--        &ndash;&gt;-->
<!--        <module name="ParameterNumber">-->
<!--            <property name="max" value="15"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the padding of an empty for iterator; that is whether white space is required at an empty-->
<!--                        for iterator, or such white space is forbidden. No check occurs if there is a line wrap at the-->
<!--                        iterator, as in.-->
<!--        Example:        for (Iterator foo = very.long.line.iterator();-->
<!--                          foo.hasNext();-->
<!--                         )-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#EmptyForIteratorPad-->
<!--        &ndash;&gt;-->
<!--        <module name="EmptyForIteratorPad"/>-->


<!--        &lt;!&ndash;                                     TO CONFIG                                            &ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--        Description:    Checks that there is no whitespace after/before a token.-->
<!--        Example:        arr[1]=2; //fail-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#NoWhitespaceAfter-->
<!--                        http://checkstyle.sourceforge.net/config_whitespace.html#NoWhitespaceBefore`-->
<!--        &ndash;&gt;-->
<!--        <module name="NoWhitespaceAfter"/>-->
<!--        <module name="NoWhitespaceBefore"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the policy on the padding of parentheses.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#ParenPad-->
<!--        &ndash;&gt;-->
<!--        <module name="ParenPad"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the policy on the padding of parentheses for typecasts. That is, whether a space is-->
<!--                        required after a left parenthesis and before a right parenthesis, or such spaces are forbidden.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#TypecastParenPad-->
<!--        &ndash;&gt;-->
<!--        <module name="TypecastParenPad"/>-->


<!--        &lt;!&ndash;                                     TO CONFIG                                            &ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--        Description:    Checks that a token is followed by whitespace.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#WhitespaceAfter-->
<!--        &ndash;&gt;-->
<!--        <module name="WhitespaceAfter"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for redundant modifiers in:-->
<!--                        - Interface and annotation definitions.-->
<!--                        - Final modifier on methods of final and anonymous classes.-->
<!--                        - Inner interface declarations that are declared as static.-->
<!--                        - Class constructors.-->
<!--                        - Nested enum definitions that are declared as static.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_modifier.html#RedundantModifier-->
<!--        &ndash;&gt;-->
<!--        <module name="RedundantModifier"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Finds nested blocks, i.e. blocks that are used freely in the code. Check Doc for details.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_blocks.html#AvoidNestedBlocks-->
<!--        &ndash;&gt;-->
<!--        <module name="AvoidNestedBlocks"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Detects inline conditionals.-->
<!--        Example:        String a = getParameter("a");-->
<!--                        String b = (a==null || a.length<1) ? null : a.substring(1);-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#AvoidInlineConditionals-->
<!--        &ndash;&gt;-->
<!--        <module name="AvoidInlineConditionals"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Detects empty statements (standalone ";" semicolon).-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#EmptyStatement-->
<!--        &ndash;&gt;-->
<!--        <module name="EmptyStatement"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that classes that override equals() also override hashCode().-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#EqualsHashCode-->
<!--        &ndash;&gt;-->
<!--        <module name="EqualsHashCode"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that a local variable or a parameter does not shadow a field that is defined in the same class.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#HiddenField-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="HiddenField"/>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for illegal instantiations where a factory method is preferred.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#IllegalInstantiation-->
<!--        &ndash;&gt;-->
<!--        <module name="IllegalInstantiation"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#InnerAssignment-->
<!--        &ndash;&gt;-->
<!--        <module name="InnerAssignment"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that there are no "magic numbers" where a magic number is a numeric literal that is not-->
<!--                        defined as a constant. By default, -1, 0, 1, and 2 are not considered to be magic numbers.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#MagicNumber-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="MagicNumber"/>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    The Check finds classes that are designed for extension (subclass creation). Check Doc for details.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_design.html#DesignForExtension-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="DesignForExtension"/>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that a class which has only private constructors is declared as final.-->
<!--                        Doesn't check for classes nested in interfaces or annotations, as they are always final there.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_design.html#FinalClass-->
<!--        &ndash;&gt;-->
<!--        <module name="FinalClass"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Makes sure that utility classes (classes that contain only static methods or fields in their API)-->
<!--                        do not have a public constructor.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_design.html#HideUtilityClassConstructor-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="HideUtilityClassConstructor"/>&ndash;&gt;-->


<!--        &lt;!&ndash;                                     TO CONFIG                                            &ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--        Description:    Implements Joshua Bloch, Effective Java, Item 17 - Use Interfaces only to define types.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_design.html#InterfaceIsType-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="InterfaceIsType"/>&ndash;&gt;-->
<!--        &lt;!&ndash;                                                                                          &ndash;&gt;-->


<!--        &lt;!&ndash;-->
<!--        Description:    Checks visibility of class members. Only static final, immutable or annotated by specified-->
<!--                        annotation members may be public; other class members must be private unless the property-->
<!--                        protectedAllowed or packageAllowed is set.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_design.html#VisibilityModifier-->
<!--        &ndash;&gt;-->
<!--        <module name="VisibilityModifier">-->
<!--            <property name="protectedAllowed" value="true"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Check that parameters for methods, constructors, and catch blocks are final. Interface, abstract,-->
<!--                        and native methods are not checked: the final keyword does not make sense for interface, abstract,-->
<!--                        and native method parameters as there is no code that could modify the parameter.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_misc.html#FinalParameters-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="FinalParameters"/>&ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    A check for Tod0 comments. Actually it is a generic regular expression matcher on Java comments.-->
<!--                        To check for other patterns in Java comments, set the format property.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_misc.html#TodoComment-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="TodoComment"/>&ndash;&gt;-->

<!--        &lt;!&ndash; Included from Argona project &ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks the padding of an empty for initializer.-->
<!--        Example:        for (int i = 10-->
<!--                           ; i < j; i++){ ... }-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_whitespace.html#EmptyForInitializerPad-->
<!--        &ndash;&gt;-->
<!--        <module name="EmptyForInitializerPad">-->
<!--            <property name="option" value="space"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Restricts nested try blocks to a specified depth (default = 1).-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#NestedIfDepth-->
<!--        &ndash;&gt;-->
<!--        <module name="NestedTryDepth">-->
<!--            <property name="max" value="1"/>-->
<!--        </module>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Check that the default is after all the cases in a switch statement.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#DefaultComesLast-->
<!--        &ndash;&gt;-->
<!--        <module name="DefaultComesLast"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Check that the default is after all the cases in a switch statement.-->
<!--        Example:        if (count == true) {...}  // wrong-->
<!--                        if (count) {...}          // right-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#SimplifyBooleanExpression-->
<!--        &ndash;&gt;-->
<!--        <module name="SimplifyBooleanExpression"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks for over-complicated boolean return statements.-->
<!--        Example:        // wrong-->
<!--                        if (valid()) {-->
<!--                            return false;-->
<!--                        } else {-->
<!--                            return true;-->
<!--                        }-->
<!--                        // right-->
<!--                        return !valid();-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#SimplifyBooleanReturn-->
<!--        &ndash;&gt;-->
<!--        <module name="SimplifyBooleanReturn"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Checks that string literals are not used with == or !=.-->
<!--        Example:        if (x == "something")       // wrong-->
<!--                        if ("something".equals(x))  // right-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#StringLiteralEquality-->
<!--        &ndash;&gt;-->
<!--        <module name="StringLiteralEquality"/>-->

<!--        &lt;!&ndash;-->
<!--        Description:    Ensures that a class has a package declaration, and (optionally) whether the package name-->
<!--                        matches the directory name for the source file.-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#PackageDeclaration-->
<!--        &ndash;&gt;-->
<!--        <module name="PackageDeclaration"/>-->

<!--        &lt;!&ndash;                TO CONFIG                                   &ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--        Description:    Restricts nested if-else blocks to a specified depth (default = 1).-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#NestedIfDepth-->
<!--        &ndash;&gt;-->
<!--        &lt;!&ndash;<module name="NestedIfDepth"/>&ndash;&gt;-->
<!--        &lt;!&ndash;                                                             &ndash;&gt;-->

<!--        &lt;!&ndash;-->
<!--        Description:    Restricts nested for blocks to a specified depth (default = 1).-->
<!--        Doc ref:        http://checkstyle.sourceforge.net/config_coding.html#NestedForDepth-->
<!--        &ndash;&gt;-->
<!--        <module name="NestedForDepth"/>-->
<!--    </module>-->
</module>
